### 커밋 메시지란?

→ 작업중인 로컬 디렉터리에서 git add를 할 때 변경된 파일들이 스테이지에 추가가 되는데 이때 변경된 파일들을 확정본에 반영시킬 때 커밋 메시지를 작성한다. 

즉, **커밋 메시지는 변경된 파일에 어떤 변화가 반영되었는지 설명하기 위한 글**이다.

# 좋은 커밋 메시지란?

## **1. 커밋 유형 지정**

- FEAT : 새로운 기능의 추가
- FIX: 버그 수정
- DOCS: 문서 수정
- STYLE: 스타일 관련 기능(코드 포맷팅, 세미콜론 누락, 코드 자체의 변경이 없는 경우)
- REFACTOR: 코드 리펙토링
- TEST: 테스트 코트, 리펙토링 테스트 코드 추가
- CHORE: 빌드 업무 수정, 패키지 매니저 수정(ex .gitignore 수정 같은 경우)

## **2. 제목과 본문을 빈 행으로 분리**

여러 행으로 구성된 커밋 로그를 -m 스위치를 사용해서 입력하기는 어렵다 적합한 편집기를 사용하여 편집을 진행하     여야 하는데([깃 커밋 에디터 사용법](https://richone.tistory.com/27)) 해당 글을 참고하자

## **3. 제목 행을 50자로 제한**

강제로 제한하는 것은 아니고 읽기 쉽고 간결하게 표현하기 위한 경험에 의한 규칙이다

## **4. 제목 행의 첫 글자는 대문자로 시작**

- readme file modification **X**
- Readme file modification **O**
- 

## **5. 제목 행 끝에 마침표를 넣지 않는다**

제목 행의 끝에는 마침표가 필요 없다. 50자 규칙에 따르기 위해서라도 마침표를 넣는 것은 불필요한 공간 낭비이다

- Open the door. **X**
- Open the door **O**

## **6. 제목 행에 명령문을 사용한다**

"명령이나 설명하듯이 작성"

- 네 방을 치운다 (Clean your room)
- 문을 닫는다 (Close the door)
- 쓰레기를 갖다 버린다 (Take out the trash)

## **7. 본문은 72자마다 끊어 줄을 바꿔준다.**

## **8. 본문을 사용하여 변경 한 내용과 이유 설명(어떻게 보다는 무엇과 왜를 설명한다)**

## **9. 검토자가 원래 문제가 무엇인지 이해한다고 가정하지 말고 확실하게 설명 추가**

## **10. 자신의 코드가 직관적으로 바로 파악 할 수 있다고 생각하지 말자**

## **11. 팀에서 정한 Commit 규칙을 따르자**